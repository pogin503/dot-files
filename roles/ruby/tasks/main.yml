---
- block:
  - name: install dpendencies (Ubuntu)
    apt:
      name: "{{ item }}"
      state: present
      update_cache: yes
    with_items:
      - libtool-bin
      - libffi-dev
    become: true
    when: ansible_distribution == 'Ubuntu'
  
  - name: install dpendencies and rbenv (macOS)
    homebrew:
      name: "{{ item.name }}"
      state: "{{ item.state }}"
    with_items:
      # - { name: rbenv, state: present }
      # - { name: ruby-build, state: latest }
      # iruby dependencies
      - { name: automake, state: present }
      - { name: gmp, state: present }
      - { name: libtool, state: present }
      - { name: wget, state: present }
    when: ansible_os_family == 'Darwin'

# - name: install rbenv
#   git:
#     repo: https://github.com/sstephenson/rbenv.git
#     dest: "{{ ansible_env.HOME }}/.rbenv"
#     version: master
#   when: ansible_distribution == 'Ubuntu'

- name: add rbenv path to bash_profile
  become: true
  template:
    src: templates/rbenv.sh.j2
    dest: /etc/profile.d/rbenv.sh
  when: not ansible_os_family == 'Darwin'

# - name: install ruby_build
#   git: repo=https://github.com/sstephenson/ruby-build.git
#        dest={{ ansible_env.HOME }}/.rbenv/plugins/ruby-build
#        version=master
#   when: not ansible_os_family == 'Darwin'

# - name: install ruby
#   shell: |
#     export RBENV_ROOT={{ ansible_env.HOME }}/.rbenv
#     export PATH=$RBENV_ROOT/bin:$PATH
#     echo N | rbenv install {{ ruby_version }}
#     rbenv global {{ ruby_version }}
#   args:
#     creates: "{{ ansible_env.HOME }}/.rbenv/versions/{{ ruby_version }}"

# - name: set ruby {{ ruby_version }} for system
#   command:  bash -lc "rbenv rehash"

# - name: check ruby installed version
#   shell: bash -lc "rbenv versions"
#   register: ruby_installed_version

# - name: change ~/.rbenv owner to vagrant
#   file: path={{ ansible_env.HOME }}/.rbenv state=directory owner=ubuntu group=vagrant recurse=yes

- name: install iruby dpendencies (macOS)
  block:
    - homebrew:
        name: "{{ item.name }}"
        state: "{{ item.state }}"
      with_items:
        - { name: zeromq, state: present }
        - { name: czmq, state: latest }
    - name: iruby dependency
      gem:
        name: "{{ item.name }}"
        state: "{{ item.state }}"
        # Install ~/.rbenv/
        user_install: False
        executable: "{{ ansible_env.HOME }}/.rbenv/shims/gem"
      with_items:
        - { name: cztop, state: present }
        - { name: iruby, state: present }
  when: ansible_os_family == 'Darwin'

- name: install iruby dpendencies (Ubuntu)
  block:
    - name: iruby dependency (block)
      gem:
        name: "{{ item.name }}"
        state: "{{ item.state }}"
        user_install: False
        executable: "{{ ansible_env.HOME }}/.rbenv/shims/gem"
      with_items:
        - { name: cztop, state: present }
    - name: install dpendencies
      apt:
        name: "{{ item }}"
        state: present
        update_cache: yes
      with_items:
        - git
        - libzmq-dev
        - autoconf
        - pkg-config
      become: true
    - name: clone czmq
      git:
        repo: 'https://github.com/zeromq/czmq.git'
        dest: '/tmp/czmq'
        version: master
        force: yes
    - name: make czmq
      shell: |
        ./autogen.sh && ./configure && sudo make && sudo make install
      args:
        chdir: '/tmp/czmq'
    - name: install iruby
      gem:
        name: "{{ item.name }}"
        state: "{{ item.state }}"
        user_install: False
        executable: "{{ ansible_env.HOME }}/.rbenv/shims/gem"
      with_items:
        # for iruby notebook
        - { name: iruby, state: present }
  when: ansible_distribution == 'Ubuntu'

- name: install bundler by rbenv gem
  gem:
    name: "{{ item }}"
    user_install: False
    executable: "{{ ansible_env.HOME }}/.rbenv/shims/gem"
  with_items:
    - "{{ ruby_packages }}"

# - name: Install iruby kernel
#   shell: |
#     ls {{ ansible_env.HOME }}/.rbenv/shims/
#     {{ ansible_env.HOME }}/.rbenv/shims/iruby register --force
